// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using RemindMe.Data;
using System;

namespace RemindMe.Migrations
{
    [DbContext(typeof(RemindMeDbContext))]
    partial class RemindMeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RemindMe.Models.NonRecurringEvents", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("NonRecuringEventCreateDate");

                    b.Property<string>("NonRecurringEventDescription");

                    b.Property<string>("NonRecurringEventName");

                    b.HasKey("ID");

                    b.ToTable("NonRecurringEvents");
                });

            modelBuilder.Entity("RemindMe.Models.NonRecurringReminders", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("NonRecuringReminderAlertFrequency");

                    b.Property<string>("NonRecuringReminderCreateDate");

                    b.Property<string>("NonRecurringReminderDescription");

                    b.Property<string>("NonRecurringReminderFirstAlertTime");

                    b.Property<string>("NonRecurringReminderLastAlertDate");

                    b.Property<string>("NonRecurringReminderName");

                    b.Property<string>("NonRecurringReminderSecondAlertTime");

                    b.Property<string>("NonRecurringReminderStartAlertDate");

                    b.HasKey("ID");

                    b.ToTable("NonRecurringReminders");
                });

            modelBuilder.Entity("RemindMe.Models.RecurringEvents", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RecuringEventCreateDate");

                    b.Property<string>("RecurringEventDescription");

                    b.Property<string>("RecurringEventName");

                    b.HasKey("ID");

                    b.ToTable("RecurringEvents");
                });

            modelBuilder.Entity("RemindMe.Models.RecurringReminders", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RecuringReminderAlertFrequency");

                    b.Property<string>("RecuringReminderCreateDate");

                    b.Property<string>("RecurringReminderDescription");

                    b.Property<string>("RecurringReminderFirstAlertTime");

                    b.Property<string>("RecurringReminderLastAlertDate");

                    b.Property<string>("RecurringReminderName");

                    b.Property<string>("RecurringReminderRepeatFrequency");

                    b.Property<string>("RecurringReminderSecondAlertTime");

                    b.Property<string>("RecurringReminderStartAlertDate");

                    b.Property<int>("UserId");

                    b.HasKey("ID");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("RecurringReminders");
                });

            modelBuilder.Entity("RemindMe.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("GCalEmail");

                    b.Property<string>("GCalEmailPassword");

                    b.Property<int>("NonRecurringEventsId");

                    b.Property<int>("NonRecurringReminderId");

                    b.Property<int?>("NonRecurringReminderNameID");

                    b.Property<string>("Password");

                    b.Property<int>("RecurringEventsId");

                    b.Property<int>("RecurringReminderId");

                    b.Property<string>("UserCreateDate");

                    b.Property<string>("Username");

                    b.HasKey("ID");

                    b.HasIndex("NonRecurringEventsId");

                    b.HasIndex("NonRecurringReminderNameID");

                    b.HasIndex("RecurringEventsId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("RemindMe.Models.UserNonRecurringEvents", b =>
                {
                    b.Property<int>("NonRecurringEventsID");

                    b.Property<int>("UserID");

                    b.HasKey("NonRecurringEventsID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("UserNonRecurringEvents");
                });

            modelBuilder.Entity("RemindMe.Models.UserNonRecurringReminders", b =>
                {
                    b.Property<int>("NonRecurringRemindersID");

                    b.Property<int>("UserID");

                    b.HasKey("NonRecurringRemindersID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("UserNonRecurringReminders");
                });

            modelBuilder.Entity("RemindMe.Models.UserRecurringReminders", b =>
                {
                    b.Property<int>("RecurringRemindersID");

                    b.Property<int>("UserID");

                    b.HasKey("RecurringRemindersID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("UserRecurringReminders");
                });

            modelBuilder.Entity("RemindMe.UserRecurringEvents", b =>
                {
                    b.Property<int>("RecurringEventsID");

                    b.Property<int>("UserID");

                    b.HasKey("RecurringEventsID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("UserRecurringEvents");
                });

            modelBuilder.Entity("RemindMe.Models.RecurringReminders", b =>
                {
                    b.HasOne("RemindMe.Models.User", "User")
                        .WithOne("RecurringReminderName")
                        .HasForeignKey("RemindMe.Models.RecurringReminders", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RemindMe.Models.User", b =>
                {
                    b.HasOne("RemindMe.Models.NonRecurringEvents", "NonRecurringEventsName")
                        .WithMany()
                        .HasForeignKey("NonRecurringEventsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RemindMe.Models.NonRecurringReminders", "NonRecurringReminderName")
                        .WithMany("UsersOfNonRecurringReminders")
                        .HasForeignKey("NonRecurringReminderNameID");

                    b.HasOne("RemindMe.Models.RecurringEvents", "RecurringEventsName")
                        .WithMany("Users")
                        .HasForeignKey("RecurringEventsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RemindMe.Models.UserNonRecurringEvents", b =>
                {
                    b.HasOne("RemindMe.Models.NonRecurringEvents", "NonRecurringEvents")
                        .WithMany("UserNonRecurringEvents")
                        .HasForeignKey("NonRecurringEventsID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RemindMe.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RemindMe.Models.UserNonRecurringReminders", b =>
                {
                    b.HasOne("RemindMe.Models.NonRecurringReminders", "NonRecurringReminders")
                        .WithMany()
                        .HasForeignKey("NonRecurringRemindersID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RemindMe.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RemindMe.Models.UserRecurringReminders", b =>
                {
                    b.HasOne("RemindMe.Models.RecurringReminders", "RecurringReminders")
                        .WithMany()
                        .HasForeignKey("RecurringRemindersID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RemindMe.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RemindMe.UserRecurringEvents", b =>
                {
                    b.HasOne("RemindMe.Models.RecurringEvents", "RecurringEvents")
                        .WithMany()
                        .HasForeignKey("RecurringEventsID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RemindMe.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
