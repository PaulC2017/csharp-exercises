// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using RemindMe.Data;
using System;

namespace RemindMe.Migrations
{
    [DbContext(typeof(RemindMeDbContext))]
    partial class RemindMeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RemindMe.Models.EventTypesNonRecurring", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("NonRecuringEventCreateDate");

                    b.Property<string>("NonRecurringEventDescription");

                    b.Property<string>("NonRecurringEventName");

                    b.HasKey("ID");

                    b.ToTable("EventTypesNonRecurring");
                });

            modelBuilder.Entity("RemindMe.Models.EventTypesRecurring", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RecuringEventCreateDate");

                    b.Property<string>("RecurringEventDescription");

                    b.Property<string>("RecurringEventName");

                    b.HasKey("ID");

                    b.ToTable("EventTypesRecurring");
                });

            modelBuilder.Entity("RemindMe.Models.NonRecurringReminders", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("NonRecuringReminderAlertFrequency");

                    b.Property<string>("NonRecuringReminderCreateDate");

                    b.Property<string>("NonRecurringReminderDescription");

                    b.Property<string>("NonRecurringReminderFirstAlertTime");

                    b.Property<string>("NonRecurringReminderLastAlertDate");

                    b.Property<string>("NonRecurringReminderName");

                    b.Property<string>("NonRecurringReminderSecondAlertTime");

                    b.Property<string>("NonRecurringReminderStartAlertDate");

                    b.HasKey("ID");

                    b.ToTable("NonRecurringReminders");
                });

            modelBuilder.Entity("RemindMe.Models.RecurringReminders", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RecuringReminderAlertFrequency");

                    b.Property<string>("RecuringReminderCreateDate");

                    b.Property<string>("RecurringReminderDescription");

                    b.Property<string>("RecurringReminderFirstAlertTime");

                    b.Property<string>("RecurringReminderLastAlertDate");

                    b.Property<string>("RecurringReminderName");

                    b.Property<string>("RecurringReminderRepeatFrequency");

                    b.Property<string>("RecurringReminderSecondAlertTime");

                    b.Property<string>("RecurringReminderStartAlertDate");

                    b.HasKey("ID");

                    b.ToTable("RecurringReminders");
                });

            modelBuilder.Entity("RemindMe.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<int?>("EventTypesNonRecurringID");

                    b.Property<int?>("EventTypesRecurringID");

                    b.Property<string>("GCalEmail");

                    b.Property<string>("GCalEmailPassword");

                    b.Property<int>("NonRecurringReminderId");

                    b.Property<int?>("NonRecurringReminderNameID");

                    b.Property<string>("Password");

                    b.Property<int>("RecurringReminderId");

                    b.Property<int?>("RecurringReminderNameID");

                    b.Property<string>("UserCreateDate");

                    b.Property<string>("Username");

                    b.HasKey("UserId");

                    b.HasIndex("EventTypesNonRecurringID");

                    b.HasIndex("EventTypesRecurringID");

                    b.HasIndex("NonRecurringReminderNameID");

                    b.HasIndex("RecurringReminderNameID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("RemindMe.Models.UserEventTypesNonRecurring", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("NonRecurringEventId");

                    b.Property<int?>("EventTypesNonRecurringID");

                    b.HasKey("UserId", "NonRecurringEventId");

                    b.HasIndex("EventTypesNonRecurringID");

                    b.ToTable("UserEventTypesNonRecurring");
                });

            modelBuilder.Entity("RemindMe.Models.UserEventTypesRecurring", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RecurringEventId");

                    b.Property<int?>("EventTypesRecurringID");

                    b.HasKey("UserId", "RecurringEventId");

                    b.HasIndex("EventTypesRecurringID");

                    b.ToTable("UserEventTypesRecurring");
                });

            modelBuilder.Entity("RemindMe.Models.User", b =>
                {
                    b.HasOne("RemindMe.Models.EventTypesNonRecurring")
                        .WithMany("User")
                        .HasForeignKey("EventTypesNonRecurringID");

                    b.HasOne("RemindMe.Models.EventTypesRecurring")
                        .WithMany("User")
                        .HasForeignKey("EventTypesRecurringID");

                    b.HasOne("RemindMe.Models.NonRecurringReminders", "NonRecurringReminderName")
                        .WithMany("UsersOfNonRecurringReminders")
                        .HasForeignKey("NonRecurringReminderNameID");

                    b.HasOne("RemindMe.Models.RecurringReminders", "RecurringReminderName")
                        .WithMany("UsersOfRecurringReminders")
                        .HasForeignKey("RecurringReminderNameID");
                });

            modelBuilder.Entity("RemindMe.Models.UserEventTypesNonRecurring", b =>
                {
                    b.HasOne("RemindMe.Models.EventTypesNonRecurring", "EventTypesNonRecurring")
                        .WithMany()
                        .HasForeignKey("EventTypesNonRecurringID");

                    b.HasOne("RemindMe.Models.User", "User")
                        .WithMany("UserEventTypesNonRecurring")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RemindMe.Models.UserEventTypesRecurring", b =>
                {
                    b.HasOne("RemindMe.Models.EventTypesNonRecurring", "EventTypesRecurring")
                        .WithMany()
                        .HasForeignKey("EventTypesRecurringID");

                    b.HasOne("RemindMe.Models.User", "User")
                        .WithMany("UserEventTypesRecurring")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
